extends layout

// block css will insert css scripts listed in head.jade that are needed on every page.
block css
	// files below are page specific
	link(rel='stylesheet' href='css/create.css')

block body
	body(ng-app='createApp' ng-cloak)
		#wrapper
			include ./include/navbar.jade
			md-toolbar
				.md-toolbar-tools
					.md-title Create LiPD

			.col-sm-8.col-sm-offset-2
						
				#form-container(ng-controller='CreateCtrl')
				
					// DEV AREA : Check that everything is binging in angular correctly. 
					h4 Form Data Preview
					p metadata
					pre#metaPretty
					p markers
					pre {{ markers }}
					p(ng-if="warningCt>0") Errors
					pre(style="background-color:#FEBABB;" ng-if="errorCt>0") {{ errorCt }} errors detected
					p(ng-if="warningCt>0") Warnings
					pre(style="background-color:#FEEEB6;" ng-if="warningCt>0") {{ warningCt }} warnings found
					h4(ng-if="validated") Validation Complete!
					pre(style="background-color:#DFF1C1;" ng-if="validated") Done!
						| This file adheres to LiPD v1.2 standards.

					div
						// METADATA
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span Metadata
						md-content(layout-padding='', layout='row', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label LiPD Version
								input(ng-model='meta.lipdVersion')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Site Name
								input(ng-model='meta.siteName')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Collection Name
								input(ng-model='meta.collectionName')
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Archive Type
								input(ng-model='meta.archiveType')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Data Set Name
								input(ng-model='meta.dataSetName')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Investigators
								input(ng-model='meta.investigators')
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Notes
								textarea(ng-model='meta.notes', columns='1', md-maxlength='150')
								
						// FUNDING
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span Funding
						div(layout='', layout-padding='', layout-sm='column', ng-repeat='item in funding')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Agency
								input(ng-model='meta.funding[item.id][item.a]')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Grant
								input(ng-model='meta.funding[item.id][item.f]')
						div(layout='', layout-padding='', layout-sm='column')
							md-button(ng-click='addFunding()')  + Add Funding
							
						// PUBLICATION
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span Publication
								
						// AUTHORS
						div(layout='', layout-padding='', layout-sm='column', ng-repeat='item in authors')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Author Name
								input(ng-model='meta.authors[item.id]')
						div(layout='', layout-padding='', layout-sm='column')
							md-button(ng-click='addAuthor()')  + Add Author
						div(layout='', layout-padding='', layout-wrap='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label DOI
								input(ng-model='meta.pub.doi')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Year
								input(ng-model='meta.pub.year')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Volume
								input(ng-model='meta.pub.volume')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Edition
								input(ng-model='meta.pub.edition')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Issue
								input(ng-model='meta.pub.issue')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Publication Type
								input(ng-model='meta.pub.type')
								
						// GEOGRAPHY
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span Geography
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex="")
								label Type
								input(ng-model='meta.geo.type')
							md-input-container(flex = "")
								label Type
								md-select(ng-model='meta.geo.geometryType')
									md-option(ng-repeat='t in geoGeometryType', value='{{t}}') {{t}}
									
						// GOOGLE MAP
						// ng-if="userData.geo.geometry.coordinates"
						div
							ui-gmap-google-map(center='map.center', zoom='map.zoom', draggable='true', options='options', bounds='map.bounds')
								ui-gmap-markers(models='geoMarkers', coords="'self'", events='events', options='options')
								
						// COORDINATES
						div(layout='', layout-padding='', layout-sm='column', ng-repeat='obj in geoMarkers')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								md-tooltip -90 to 90
								label Latitude
								input(ng-model='geoMarkers[$index].latitude', required, type='number', min='-90', max='90')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								md-tooltip -180 to 180
								label Longitude
								input(ng-model='geoMarkers[$index].longitude', required, type='number', min='-180', max='180')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Elevation
								input(type='number', ng-model='geoMarkers[$index].elevation')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Units
								md-select(ng-model='geoMarkers[$index].unit')
									md-option(ng-repeat='u in unitsDistance', value='{{u.short}}') {{u.long}}
							md-button.md-small(flex = "", ng-click='removeCoords($index)')  Remove 
						div(layout='', layout-padding='', layout-sm='column')
							md-button(ng-click='addCoordinates()')  + Add Coordinates
							md-button(ng-click='pushMarkers()')  Save 
						md-subheader.md-primary Properties
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Site Name
								input(ng-model='meta.geo.properties.siteName')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Location
								input(ng-model='meta.geo.properties.location')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Country
								input(ng-model='meta.geo.properties.country')

									
						// PALEO DATA
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span PaleoData
						//- md-subheader.md-primary Core Length
						//- div(layout='', layout-padding='', layout-sm='column')
						//- 	md-input-container(flex='66')
						//- 		label Value
						//- 		input(type='number', ng-model='userData.core.value')
							//- md-input-container(flex='')
							//- 	label Units
							//- 	md-select(ng-model='userData.core.unit')
							//- 		md-option(ng-repeat='u in unitsDistance', value='{{u.short}}') {{u.long}}
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								md-tooltip(md-visible='demo.showTooltip') Here is some more helpful information
								label Table Name
								input(ng-model='meta.paleoData.paleoMeasurementTable.tableName')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Filename
								input(ng-model='meta.paleoData.paleoMeasurementTable.filename')
						div(layout='', layout-padding='', layout-sm='column', ng-model='f.columns', ng-repeat='i in colsPaleo')
							md-subheader.md-primary Column {{i.colsPaleo}}
							md-input-container(flex='', ng-repeat='(k,v) in i', class="md-input-has-value")
								label {{k}}
								input(value='{{v}}')
						div(layout='', layout-padding='', layout-sm='column')
							md-button(ng-click='addColumnPaleo()')  + Add Column
							
						// CHRONOLOGY
						md-toolbar.md-hue-1
							h2.md-toolbar-tools
								span ChronData
						div(layout='', layout-padding='', layout-sm='column')
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								md-tooltip(md-visible='demo.showTooltip') Here is some more helpful information
								label Table Name
								input(ng-model='meta.chronData.chronMeasurementTable.tableName' required)
							md-input-container(flex='', ng-class="{'md-input-has-value': pageMeta.toggle}")
								label Filename
								input(ng-model='meta.chronData.chronMeasurementTable.filename' required)
						div(layout='', layout-padding='', layout-sm='column', ng-model='colsChron', ng-repeat='i in colsChron')
							md-subheader.md-primary Column {{i.colsChron}}
							// when the toggle is true, all fields animate and show to show the input values. ng-class changes.
							md-input-container(flex='', ng-repeat='(k,v) in i', class="md-input-has-value")
								label {{k}}
								input(value='{{v}}')
						div(layout='', layout-padding='', layout-sm='column')
							md-button(ng-click='addColumnChron()')  + Add Column


// block js will insert js scripts listed in footer.jade that are needed on every page.
block js
	// files below are page specific
	script(src='apps/createApp.js')
	script(src='js/ngCreateLipd.js')
	//- script(src="lib/angular-busy.js")
	//- script(src='lib/json-tree.js')
	//- script(src="lib/zip/zip.js")
	//- script(src="lib/zip/zip-ext.js")
	//- script(src="lib/papaparse.min.js")
	//- script(src="lib/FileSaver.min.js")
	//- script(src="https://cdnjs.cloudflare.com/ajax/libs/angular-recaptcha/3.2.1/angular-recaptcha.min.js")
	//- script(src="https://www.google.com/recaptcha/api.js?onload=vcRecaptchaApiLoaded&render=explicit" async defer)
	script(src='https://cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.15/angular-ui-router.min.js')
	script(src='https://cdnjs.cloudflare.com/ajax/libs/angular-google-maps/2.2.0/angular-google-maps.min.js')
	script(src='https://cdnjs.cloudflare.com/ajax/libs/danialfarid-angular-file-upload/8.0.1/ng-file-upload-shim.min.js')
	script(src='https://cdnjs.cloudflare.com/ajax/libs/danialfarid-angular-file-upload/8.0.1/ng-file-upload.min.js')
	script(src="https://cdnjs.cloudflare.com/ajax/libs/ngStorage/0.3.6/ngStorage.min.js")
	script(src='https://maps.googleapis.com/maps/api/js?libraries=places&key=AIzaSyA7HRzSi5HhyKTX9Xw7CZ-9XScwq04TZyc')
	script(src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/2.2.0/ui-bootstrap-tpls.min.js")
	script(src="https://cdnjs.cloudflare.com/ajax/libs/angular-sanitize/1.5.8/angular-sanitize.min.js")
	script(src="https://unpkg.com/ng-table@2.0.2/bundles/ng-table.min.js")
